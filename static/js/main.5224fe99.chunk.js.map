{"version":3,"sources":["alarmes-pin.js","alarmes-info.js","App.js","serviceWorker.js","index.js"],"names":["CityPin","info","this","props","estat","concat","_this$props","_this$props$size","size","onClick","pinStyle","cursor","fill","stroke","react_default","a","createElement","height","viewBox","style","Object","objectSpread","transform","d","PureComponent","CityInfo","displayName","nom","badge","Badge","variant","Container","Row","Col","href","initialViewState","data","sourcePosition","targetPosition","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_updateViewport","viewport","setState","_renderCityMarker","alarma","index","esm","key","longitude","coords","latitude","alarmes_pin_CityPin","popupInfo","state","zoom","pitch","bearing","_this2","tipSize","anchor","closeOnClick","onClose","alarmes_info_CityInfo","LineLayer","id","assign","width","mapboxApiAccessToken","mapStyle","onViewportChange","ALARMES","map","_renderPopup","fluid","sm","Card","backgroundColor","Img","src","rounded","Body","Title","Subtitle","className","Text","Spinner","animation","Link","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5224fe99.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { Container, Spinner } from 'react-bootstrap';\r\n\r\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\r\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\r\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\r\n\r\n\r\n\r\n\r\n\r\nexport default class CityPin extends PureComponent {\r\n\r\n  render() {\r\n    const { info } = this.props;\r\n    const estat = `${info.estat}`;\r\n\r\n    const { size = 20, onClick } = this.props;\r\n\r\n    var pinStyle = {\r\n      cursor: 'pointer',\r\n      fill: 'deepskyblue',\r\n      stroke: 'none'\r\n    };\r\n\r\n    if (estat == 1) {\r\n      pinStyle = {\r\n        cursor: 'pointer',\r\n        fill: 'red',\r\n        stroke: 'none'\r\n      };\r\n    };\r\n    \r\n\r\n    return (\r\n      <svg\r\n        height={size}\r\n        viewBox=\"0 0 24 24\"\r\n        style={{ ...pinStyle, transform: `translate(${-size / 2}px,${-size}px)` }}\r\n        onClick={onClick}\r\n      >\r\n        <path d={ICON} />\r\n      </svg>\r\n    );\r\n\r\n\r\n\r\n  }\r\n}","import React, { PureComponent } from 'react';\r\nimport { Badge, Row, Col, Container } from 'react-bootstrap';\r\nexport default class CityInfo extends PureComponent {\r\n\r\n    render() {\r\n        const { info } = this.props;\r\n        const displayName = `${info.nom}`;\r\n        var badge =  <Badge variant=\"success\">No es detecta presència de contaminants a l'aigua.</Badge>\r\n        if (info.estat == \"1\") {\r\n            badge =  <Badge variant=\"danger\">S'han detectat contaminants a l'aigua</Badge>\r\n        }\r\n        return (\r\n            <Container>\r\n            <Row>\r\n                <Col>\r\n                    <h4><strong>{displayName}</strong> &nbsp;</h4>\r\n                </Col>       </Row>\r\n            <Row>\r\n                <Col>\r\n                {badge} <hr></hr>\r\n                <a href=\"www.example.org\">Càmera en directe</a>\r\n                </Col>\r\n            </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}","/// app.js\nimport React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { render } from 'react-dom';\nimport { LineLayer } from '@deck.gl/layers';\nimport ReactMapGL, { Marker, Popup } from 'react-map-gl';\nimport { Container, Row, Col, Spinner, Card } from 'react-bootstrap';\nimport Pin from './alarmes-pin'\nimport CityInfo from './alarmes-info'\nimport ALARMES from './alarmes.json'\n// Set your mapbox access token here\nconst MAPBOX_ACCESS_TOKEN = \"pk.eyJ1Ijoib3Jpb2xnYWxjZXJhbiIsImEiOiJjanNyZmk3OHcxZGE4NDlvNDRqeXp1NjgwIn0.qHzCQHRw81Wtl9WawrA-kw\";\n\n// Initial viewport settings\nconst initialViewState = {\n\n};\n\n// Data to be used by the LineLayer\nconst data = [{ sourcePosition: [-122.41669, 37.7853], targetPosition: [-122.41669, 37.781] }];\n\n\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        longitude: 2.160302,\n        latitude: 41.343862,\n        zoom: 13,\n        pitch: 0,\n        bearing: -68\n      },\n      popupInfo: null\n    };\n  }\n  _updateViewport = (viewport) => {\n    this.setState({ viewport });\n  }\n  _renderCityMarker = (alarma, index) => {\n    return (\n      <Marker\n        key={`marker-${index}`}\n        longitude={alarma.coords[0]}\n        latitude={alarma.coords[1]} >\n        <Pin size={20} info={alarma} onClick={() => this.setState({ popupInfo: alarma })} />\n      </Marker>\n    );\n  }\n\n  _renderPopup() {\n    const { popupInfo } = this.state;\n\n    return popupInfo && (\n      <Popup tipSize={5}\n        anchor=\"top\"\n        longitude={popupInfo.coords[0]}\n        latitude={popupInfo.coords[1]}\n        closeOnClick={false}\n        onClose={() => this.setState({ popupInfo: null })} >\n        <CityInfo info={popupInfo} />\n      </Popup>\n    );\n  }\n\n  render() {\n    const layers = [\n      new LineLayer({ id: 'line-layer', data })\n    ];\n\n\n    const { viewport } = this.state;\n    return (\n\n      <ReactMapGL\n        {...viewport}\n        width=\"100%\"\n        height=\"100%\"\n        initialViewState={initialViewState}\n        mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\n        mapStyle=\"mapbox://styles/oriolgalceran/cjvb5jas20cyv1fs1gjeo1vzf\"\n        onViewportChange={this._updateViewport}\n      >\n        {ALARMES.map(this._renderCityMarker)}\n        {this._renderPopup()}\n\n\n        <Container fluid={true}>\n          <Row>\n            <Col sm={3}>\n              <br />\n\n              <Card style={{ backgroundColor: 'rgba(240,255,255,0.90)' }}>\n                <Card.Img src=\"./logo_port.svg\" rounded=\"true\" />\n\n              </Card>\n            </Col>\n            <Col sm={9}>\n            </Col>\n          </Row>\n          <Row>\n            <Col sm={3}>\n              <br />\n\n              <Card style={{ backgroundColor: 'rgba(240,255,255,0.90)' }}>\n                <Card.Body>\n                  <Card.Title>Alerta</Card.Title>\n                  <Card.Subtitle className=\"mb-2 text-muted\">07:25 UTC</Card.Subtitle>\n                  <Card.Text  className=\"text-left\" >\n                  <Spinner animation=\"grow\" variant=\"danger\" size=\"sm\" />\n                  &nbsp;  S'ha detectat un abocament a <strong>Moll de l'Energia 2</strong>\n                  <hr/>\n                  </Card.Text>\n                  <Card.Link href=\"#\">Veure càmera</Card.Link>\n                  \n                </Card.Body>\n\n              </Card>\n            </Col>\n            <Col sm={9}>\n            </Col>\n          </Row>\n        </Container>\n      </ReactMapGL>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}